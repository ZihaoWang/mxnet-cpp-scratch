Requirements:
1. a C++11 compiler
2. Boost 1.53 or above
3. mxnet 0.10.0

Each directory under src/ except aux/ consists of an individual model.
In these directories, *.hyp file contains hyperparameters of model, and main.cpp file contains main framework of the model. Besides, other source files may exist if a model is too complex to be written in main.cpp.

How to compile and run each model (we use src/mlp/ as a example):
1. cd src/mlp
2. make
3. ./main

Below is my steps about learning how to use mxnet with C++.
1. src/mlp/*: a multi-layer perceptron.
    What's new:
        (1). define the computational graph of a neural network and initialize its parameters.
        (2). load data with builtin mxnet MNIST iterator.
        (3). train and test the model.
        (4). save and load the model.

2. src/lenet/*: the lenet-5 CNN in "Gradient-Based Learning Applied to Document Recognition".
    What's new:
        (1). build a more complex network.
        (2). use CNN related APIs.
        (3). print cross entropy loss value with builtin mxnet metric class after each forward pass.

3. src/capsule/*: the CapsNet in "Dynamic Routing Between Capsules".
    What's new:
        (1). define and combine multiple loss function.
        (2). pass loss and other symbols out from symbolic computational graph together.
        (3). maintain an individual state beside the computational graph (such a state participates in forward pass, but it is not updated through gradient as usual parameters).

4. src/char_rnn/*: to do
