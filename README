Requirements:
1. a C++11 compiler
2. Boost 1.53 or above
3. mxnet 0.10.0

The structure of project:
    src/aux/*: some tools for this project.
Other directories under src/ consists of different models. In these directories, *.hyp file contains hyperparameters of model, and the main.cpp contains main framework of the model. Besides, other source files may exist if the model is too complex to be written in main.cpp.

How to compile and run each model (we use src/mlp/ as a example):
1. cd src/mlp
2. make
3. ./main

If someone want to learn how to use mxnet with C++, the following sequence may help.
1. src/mlp/*: a multi-layer forward NN.
    What's new:
        (1). define a simple NN.
        (2). load data with builtin MNIST iterator.
        (3). initialize parameters.
        (4). train and test the model.
        (5). save and load the model.

2. src/lenet/*: the lenet-5 CNN in "Gradient-Based Learning Applied to Document Recognition".
    What's new:
        (1). build a more complex network.
        (2). use CNN related APIs.
        (3). print loss value after each forward pass.

3. src/capsule/*: the CapsNet in "Dynamic Routing Between Capsules".
    What's new:
        (1). define and combine multiple loss function.
        (2). pass value other than loss out from symbolic computational graph.
        (3). maintain an individual state beside the computational graph (such a state participates in forward pass of computational graph, but it is not updated through gradient as usual).

4. src/char_rnn/*: to do
